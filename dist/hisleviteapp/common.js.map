{"version":3,"file":"common.js","mappings":"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","sources":["./src/app/shared/models/job.model.ts","./src/app/shared/services/date.service.ts","./src/app/shared/services/requests/payload.service.ts","./src/app/shared/services/web/minstrytype.service.ts"],"sourcesContent":["/**\n * ALL JOB RELATED INTERFACES HERE\n */\n\nimport { UserList } from \"./auth.models\"\n\n\nexport interface IJob {\n\n    id?: number\n    name?: string\n    start_date?: string\n    end_date?: string\n    open_at?: string\n    close_at?: string\n    location?: string\n    type?: string\n    requirements?: string\n    workers_needed?: string\n    created_by_id?: string\n    show_on_calendar?: string\n    status?: number\n\n}\n\n\nexport class Assigned {\n    clocked_in?: string\n    clocked_out?: string\n    created_at: string\n    id: number\n    job_id: number\n    status: number\n    user_id: number\n    updated_at: string\n    job_assigned_date: string\n    is_reminder_sent: number\n    job: Job = new Job()\n    user: UserList = new UserList()\n}\n\nexport class Schedule {\n\n    created_at: string\n    days: string\n    hours: string\n    id: number\n    schedule_id: number\n    status: number\n    updated_at: string\n    user_id: number\n}\n\n/**\n * ALL JOB RELATED CLASSES\n */\n\nexport class Job implements IJob {\n    name?: string;\n    id?: number\n    start_date?: string\n    end_date?: string\n    open_at?: string\n    close_at?: string\n    location?: string\n    type?: string\n    requirements?: string\n    workers_needed?: string\n    created_by_id?: string\n    show_on_calendar?: string\n    status?: number\n}\n\n\nexport class JobAssignedPayload {\n    sender_id: number\n    user_id: number\n    message: string\n}\n\n\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DateService {\n\n    compare(first_date?:string, second_date?: string){\n\n\n        let first =  new Date();\n         if( first_date != undefined){\n             first = new Date(first_date)\n         }\n\n         let second =  new Date();\n         if( second_date != undefined){\n             first = new Date(second_date)\n         }\n\n        if( (new Date(first).getTime() >= new Date(second).getTime()))\n        {\n            return true;\n        }\n        return false;\n    }\n\n    isSameDay(date1: Date, date2: Date): boolean {\n        return (\n          date1.getUTCFullYear() === date2.getUTCFullYear() &&\n          date1.getMonth() === date2.getMonth() &&\n          date1.getDate() === date2.getDate()\n        );\n      }\n    \n    getSeparatorBody(date: Date): string {\n        if (this.isSameDay(date, new Date())) {\n          return 'Today';\n        }\n        const yesterday = new Date();\n        yesterday.setDate(yesterday.getDate() - 1);\n        if (this.isSameDay(date, yesterday)) {\n          return 'Yesterday';\n        }\n        return date.toISOString();\n      }\n\n      getDateOrTime(date: Date): string {\n        if (this.isSameDay(date, new Date())) {\n          return this.formatDate(date)\n        }\n        const yesterday = new Date();\n        yesterday.setDate(yesterday.getDate() - 1);\n        if (this.isSameDay(date, yesterday)) {\n          return this.formatDate(yesterday)\n        }\n        return date.toISOString();\n      }\n\n      formatDate(date) {\n\n        var d = new Date(date);\n        return `${d.getDay()}/${d.getMonth()}/${d.getFullYear()}`\n      }\n\n      formatTime(date) {\n\n        var d = new Date(date);\n        var hh = d.getHours();\n        var mm = d.getMinutes();\n        var ss = d.getSeconds();\n        var dd = \"am\";\n        var h = hh;\n        if (h >= 12) {\n          h = hh - 12;\n          dd = \"pm\";\n        }\n        if (h == 0) {\n          h = 12;\n        }\n        let m = mm < 10 ? \"0\" + mm : mm;\n      \n        let s = ss < 10 ? \"0\" + ss : ss;\n      \n        return `${h}:${m} ${dd}`\n      }\n\n      formatAMPM(date: Date) {\n\n          var hours = date.getHours();\n          var minutes = date.getMinutes();\n          var ampm = hours >= 12 ? 'pm' : 'am';\n\n          hours = hours % 12;\n\n          let hhs = hours ? hours : 12; // the hour '0' should be '12'\n          let mms = minutes < 10 ? '0'+minutes : minutes;\n          var strTime = hhs + ':' + mms + ' ' + ampm;\n          \n          return strTime;\n\n      }\n\n      formatEnUSWithOption(_date){\n\n        var options: any = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };\n        var date  = new Date(_date);\n        \n        // console.log(date.toLocaleDateString(\"en-US\")); // 9/17/2016\n        // console.log(date.toLocaleDateString(\"en-US\", options));\n\n        return date.toLocaleDateString(\"en-US\", options);\n      }\n\n}\n\n\n\n","import { HttpErrorResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { AppService } from '../app.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PayloadService extends AppService {\n\n    public TYPE_POST: string = \"post\";\n    public TYPE_GET: string  = \"get\";\n\n    request(path, data = {}, type, callback){\n        \n\n        if(type == this.TYPE_GET)\n        {\n            this.get(path).subscribe(response => {\n\n                let status =  false\n                if(response.status == \"success\"){\n                    status = true\n                }\n                callback(response.data, status);\n\n            }, (error: HttpErrorResponse) => callback(error, false));\n\n        } else {\n\n            this.post(path, data).subscribe(response => {\n\n                let status =  false\n                if(response.status == \"success\"){\n                    status = true\n                }\n                callback(response.data, status);\n\n            }, (error: HttpErrorResponse) => callback(error, false));\n\n        }\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\nimport { environment } from '../../../../environments/environment.prod';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n    providedIn: 'root'\n})\n\n\nexport class MinistryTypeService {\n\n\n    constructor(private http: HttpClient) { }\n\n    // Function to create a new MinistryType\n    createMinistryType(body: any): Observable<any> {\n        const createMinsTypeUrl = `${environment.apiUrl}/api/create/ministry-types`\n        return this.http.post(createMinsTypeUrl, body)\n\n    }\n\n    // Function to fetch all MinistryTypes\n    getSingleMinistryTypes(): Observable<any> {\n        const getMinsTypeUrl = `${environment.apiUrl}/api/get/ministry-types`\n        return this.http.get<any>(getMinsTypeUrl);\n    }\n}"],"names":["UserList","Assigned","constructor","job","Job","user","Schedule","JobAssignedPayload","DateService","compare","first_date","second_date","first","Date","undefined","second","getTime","isSameDay","date1","date2","getUTCFullYear","getMonth","getDate","getSeparatorBody","date","yesterday","setDate","toISOString","getDateOrTime","formatDate","d","getDay","getFullYear","formatTime","hh","getHours","mm","getMinutes","ss","getSeconds","dd","h","m","s","formatAMPM","hours","minutes","ampm","hhs","mms","strTime","formatEnUSWithOption","_date","options","weekday","year","month","day","toLocaleDateString","_","_2","factory","ɵfac","providedIn","AppService","PayloadService","TYPE_POST","TYPE_GET","request","path","data","type","callback","get","subscribe","response","status","error","post","t","environment","MinistryTypeService","http","createMinistryType","body","createMinsTypeUrl","apiUrl","getSingleMinistryTypes","getMinsTypeUrl","i0","ɵɵinject","i1","HttpClient"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}